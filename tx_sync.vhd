-------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /
-- \   \   \/     Vendor: Xilinx
--  \   \         Version : 1.6
--  /   /         Application : RocketIO GTX Transceiver Wizard
-- /___/   /\     Filename : tx_sync.v
-- \   \  /  \
--  \___\/\___\
--
--
-- Module TX_SYNC
-- Generated by Xilinx RocketIO GTX Transceiver Wizard
-- 
-- 
-- (c) Copyright 2008 - 2009 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of,
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES. 


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;

entity TX_SYNC is
generic
(
    PLL_DIVSEL_OUT       : integer := 1
);
port
(
    TXENPMAPHASEALIGN    :   out    std_logic; 
    TXPMASETPHASE        :   out    std_logic; 
    SYNC_DONE            :   out    std_logic;  
    USER_CLK             :   in     std_logic;  
    RESET                :   in     std_logic 
);

    attribute X_CORE_INFO : string;
    attribute X_CORE_INFO of TX_SYNC : entity is "gtxwizard_v1_6, Coregen v11.2";

end TX_SYNC;

architecture RTL of TX_SYNC is
--***********************************Parameter Declarations********************

    constant DLY : time := 1 ns;

--*******************************Register Declarations************************

    signal  begin_r               :   std_logic;
    signal  phase_align_r         :   std_logic;
    signal  ready_r               :   std_logic;
    signal  sync_counter_r        :   unsigned(15 downto 0);
    signal  wait_before_sync_r    :   unsigned(9 downto 0);
    signal  wait_stable_r         :   std_logic;
    
--*******************************Wire Declarations****************************
    
    signal   count_setphase_complete_r:   std_logic;
    signal   count_512_complete_r :   std_logic;
    signal   next_phase_align_c   :   std_logic;
    signal   next_ready_c         :   std_logic;
    signal   next_wait_stable_c   :   std_logic;

begin
--*******************************Main Body of Code****************************

    --________________________________ State machine __________________________    
    -- This state machine manages the phase alingment procedure of the GTX.
    -- The module is held in reset till the usrclk source is stable.In the 
    -- case of buffer bypass where the refclkout is used to clock the usrclks,
    -- the usrclk stable indication is given the pll_locked signal.
    -- Once the pll_lock is asserted, state machine goes into the wait_stable_r
    -- for 512 cycles to allow some time to ensure the pll is stable. After this, 
    -- it goes into the phase_align_r state where the phase alignment procedure is 
    -- executed. This involves asserting the TXENPHASEALIGN and TXPMASETPHASE for 
    -- 8192 clock cycles
    
    -- State registers
    process( USER_CLK )
    begin
        if(USER_CLK'event and USER_CLK = '1') then
            if(RESET='1') then
                begin_r           <=  '1' after DLY;
                wait_stable_r     <=  '0' after DLY;
                phase_align_r     <=  '0' after DLY;
                ready_r           <=  '0' after DLY;
            else
                begin_r           <=  '0' after DLY;
                wait_stable_r     <=  next_wait_stable_c after DLY;
                phase_align_r     <=  next_phase_align_c after DLY;
                ready_r           <=  next_ready_c after DLY;
            end if;
        end if;
    end process;

    -- Next state logic
    next_wait_stable_c      <=   begin_r or
                                 (wait_stable_r and not count_512_complete_r);
                                        
    next_phase_align_c      <=   (wait_stable_r and count_512_complete_r) or
                                 (phase_align_r and not count_setphase_complete_r);
                                        

    next_ready_c            <=   (phase_align_r and count_setphase_complete_r) or
                                 ready_r;



    --_________ Counter for to wait for pll to be stable before sync __________
    process( USER_CLK )
    begin
        if(USER_CLK'event and USER_CLK = '1') then
            if (wait_stable_r='0') then
                wait_before_sync_r <= (others=>'0') after DLY;
            else
                wait_before_sync_r <= wait_before_sync_r + 1 after DLY;
            end if;
        end if;
    end process;

    count_512_complete_r <= wait_before_sync_r(9);

    --_______________ Counter for holding SYNC for SYNC_CYCLES ________________
    process( USER_CLK )
    begin
        if(USER_CLK'event and USER_CLK = '1') then
            if (phase_align_r='0') then
                sync_counter_r <= (others=>'0') after DLY;
            else
                sync_counter_r <= sync_counter_r + 1 after DLY;
            end if;
        end if;
    end process;

pll_divsel_out_equals_1: if (PLL_DIVSEL_OUT=1) generate 
-- 8192 cycles of setphase for output divider of 1
    count_setphase_complete_r <= sync_counter_r(13);
 end generate pll_divsel_out_equals_1;

pll_divsel_out_equals_2: if (PLL_DIVSEL_OUT=2) generate 
-- 16384 cycles of setphase for output divider of 2
    count_setphase_complete_r <= sync_counter_r(14);
 end generate pll_divsel_out_equals_2;

pll_divsel_out_equals_4: if (PLL_DIVSEL_OUT=4) generate 
-- 32768 cycles of setphase for output divider of 4
    count_setphase_complete_r <= sync_counter_r(15);
 end generate pll_divsel_out_equals_4;

    --_______________ Assign the phase align ports into the GTX _______________

    TXENPMAPHASEALIGN <= not begin_r;
    TXPMASETPHASE     <= phase_align_r;

    --_______________________ Assign the sync_done port _______________________
    
    SYNC_DONE <= ready_r;
    
    
end RTL;
